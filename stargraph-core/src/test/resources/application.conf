
# Be aware.
# Used for the IT.
#
# Override via System properties if needed.
# Example: -Dstargraph.elastic.cluster-name=MyCluster.
# This configuration is merged during runtime with reference.conf.
#
testing-processor = {
  passage-processor = {
    do-linking = false
  }

  coref-processor = {
    graphene {
      coreference {
        url = "http://localhost:5128/resolve"
        text-path = "text"
        wiki-path = "wiki"
        wiki-link-path = "link"
      }
    }
  }

}


stargraph = {

  robust = false # test environment

  elastic.mapping = {
    "canonical-entities": {
      "dynamic": "strict",
      "include_in_all": false,
      "properties": {
        "knowledgeBase": {
          "type": "keyword",
          "index": true
          "doc_values": false
        },
        "value": {
          "type": "text",
          "analyzer": "english",
          "doc_values": false
        },
        "reference": {
          "type": "keyword",
          "doc_values": false
        }
      }
    }
  }

  distributional-service.rest-url = "http://indra.lambda3.org/relatedness"

  data.root-dir = "/home/viktor/stargraph-data"

  progress-watcher.log-stats = no

  kb.canonical-obama = {
    graph-index.factory.class = net.stargraph.core.NTriplesModelFactory
    enabled = yes
    language = EN

    namespaces = {
      dbr: "http://dbpedia.org/resource/"
    }

    triple-store.namespace.mapping = default

    model.entities = {
      provider.class = net.stargraph.core.CanonicalEntityProviderFactory
      index-store.factory.class = net.stargraph.core.impl.lucene.LuceneFactory
      elastic = ${stargraph.elastic}

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          sink-duplicate: ${processor.sink-duplicate}
        },
      ]

    }

    model.documents = {
      provider.class = net.stargraph.core.DocumentProviderFactory

      processors = [
        {
          coref-processor: ${testing-processor.coref-processor}
        },
        {
          passage-processor: {}
        }
      ]

      elastic = ${stargraph.elastic}
    }
  }


  kb.dbpedia-2016 = {
    triple-store.hdt.use-index = yes
  }

  kb.extend = {
    enabled = yes
    language = EN

    namespaces = {
      lambda3: "http://lambda3.org/",
      people: "http://ppl.org/"
    }

    model.facts = {
      provider.class = net.stargraph.core.FactProviderFactory
      elastic = ${stargraph.elastic}
      verbose = yes
    }
    model.entities = {
      provider.class = net.stargraph.core.EntityProviderFactory
      elastic = ${stargraph.elastic}
      verbose = yes
    }
    model.relations = {
      provider.class = net.stargraph.core.PropertyProviderFactory
      elastic = ${stargraph.elastic}
      verbose = yes
    }
  }

  kb.mytest = {
    enabled = yes
    language = EN

    model.mytype = {
      provider.class = net.stargraph.test.TestDataProviderFactory
      provider.args.data = [
        {text: "first", failOnIndexer: false, failOnProvider: false},
        {text: "second", failOnIndexer: false, failOnProvider: false},
        {text: "third", failOnIndexer: false, failOnProvider: false},
      ]
      elastic = ${stargraph.elastic}
      verbose = yes
    }
  }


  kb.simple = {
    enabled = yes
    language = EN

    triple-store.namespace.mapping = default

    namespaces = {
      dbr: "http://dbpedia.org/resource/"
    }

    model.facts = {
      provider.class = net.stargraph.core.FactProviderFactory

      processors = [
        {
          regex-filter: ${processor.regex-filter}
          regex-filter.s = [
            "^http://dbpedia.org/example/File(.*)$"
          ]

          regex-filter.p = [
            "^foaf:thumbnail$",
            "^dbo:wikiPageID$"
          ]
        },
        {entity-classifier: ${processor.entity-classifier}},
      ]

      elastic = ${stargraph.elastic}
    }

  }
  kb.obama = {
    model.documents = {
      processors = [
        {
          passage-processor: {}
        }
      ]
    }
    db.class = net.stargraph.core.NTriplesModelFactory
  }
  kb.lucene-obama = {
    enabled = yes
    language = EN

    namespaces = {
      dbr: "http://dbpedia.org/resource/"
    }

    triple-store.namespace.mapping = default

    db.class = net.stargraph.core.NTriplesModelFactory

    model.entities = {
      provider.class = net.stargraph.core.EntityProviderFactory
      # For testing purposes, we use lucene
      index-store.factory.class = net.stargraph.core.impl.lucene.LuceneFactory

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          sink-duplicate: ${processor.sink-duplicate}
        },
      ]
      elastic = ${stargraph.elastic}
    }

  }

  kb.elastic-obama = {
    enabled = yes
    language = EN

    namespaces = {
      dbr: "http://dbpedia.org/resource/"
    }

    triple-store.namespace.mapping = default

    triple-store.hdt.file = "http://data.lambda3.org/obama.hdt"
    triple-store.hdt.use-index = no

    model.facts = {
      provider.class = net.stargraph.core.FactProviderFactory

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          entity-classifier: ${processor.entity-classifier}
        },
        {
          regex-filter: ${processor.regex-filter}
        },
      ]

      elastic = ${stargraph.elastic}
    }

    model.entities = {
      provider.class = net.stargraph.core.EntityProviderFactory
      # For testing purposes, we use lucene
      index.store.factory.class = net.stargraph.core.impl.elastic.ElasticFactory

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          sink-duplicate: ${processor.sink-duplicate}
        },
      ]
      elastic = ${stargraph.elastic}
    }

    model.relations = {
      provider.class = net.stargraph.core.PropertyProviderFactory

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          stop-property-filter: ${processor.stop-property-filter}
        },
        {
          sink-duplicate: ${processor.sink-duplicate}
        },
        {
          wordnet: ${processor.wordnet}
        },
      ]

      elastic = ${stargraph.elastic}
    }

    elastic = ${stargraph.elastic}
  }

  kb.lucene-dbpedia = {
    enabled = yes
    language = EN

    namespaces = {
      dbr: "http://dbpedia.org/resource/"
    }



    triple-store.namespace.mapping = default

    triple-store.hdt.file = "http://data.lambda3.org/dbpedia_en-2016.hdt"
    triple-store.hdt.use-index = yes


    model.entities = {
      provider.class = net.stargraph.core.CanonicalEntityProviderFactory
      # For testing purposes, we use lucene
      index-store.factory.class = net.stargraph.core.impl.lucene.LuceneFactory

      processors = [
        {
          length-filter: ${processor.length-filter}
        },
        {
          sink-duplicate: ${processor.sink-duplicate}
        },
      ]


      elastic = ${stargraph.elastic}
    }

    model.documents = {
      provider.class = net.stargraph.core.DocumentProviderFactory

      processors = [
        {
          coref-processor: ${testing-processor.coref-processor}
        },
        {
          passage-processor: {}
        }
      ]

      elastic = ${stargraph.elastic}
    }
  }
}